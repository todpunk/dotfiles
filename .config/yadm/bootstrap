#!/bin/bash

# Remember that you still need zsh and yadm and thus git before you do this script

# pull submodules
cd "$HOME"
echo "Init submodules"
yadm submodule update --recursive --init

echo "Update submodules"
yadm pull --recurse-submodules

# This is required on new systems because a home dir "bin" is nonstandard
mkdir -p ~/bin

# Setup some common vars for package resolution
OS="$(uname -s)"
ARCH="$(uname -m)"

case $OS in
    "Linux")
        case $ARCH in
        "x86_64")
            ARCH=amd64
            ;;
        "aarch64")
            ARCH=arm64
            ;;
        "armv6" | "armv7l")
            ARCH=armv6l
            ;;
        "armv8")
            ARCH=arm64
            ;;
        .*386.*)
            ARCH=386
            ;;
        esac
        PLATFORM="linux-$ARCH"
    ;;
    "Darwin")
          case $ARCH in
          "x86_64")
              ARCH=amd64
              ;;
          "arm64")
              ARCH=arm64
              ;;
          esac
        PLATFORM="darwin-$ARCH"
    ;;
esac

#Install Webi and Go via Webi
curl -sS https://webi.sh/ | sh
source ~/.config/envman/PATH.env
webi golang

#Install Node LTS via Webi
webi node@lts


echo "Installing utilities"
if [ -n "$(command -v apt-get)" ]
then
#    sudo add-apt-repository -y ppa:neovim-ppa/stable
    sudo apt update
    sudo apt install -y \
	build-essential \
	curl \
	ca-certificates \
	curl \
	dnsutils \
	lsb-release \
	git \
	gnupg \
	gnupg2 \
	htop \
	inotify-tools \
	jq \
	libice6 libluajit-5.1-2 libluajit-5.1-common libmsgpackc2 libsm6 \
	libtermkey1 libtree-sitter0 libunibilium4 libvterm0 libxmu6 \
	libxt6 lua-luv neovim-runtime python3-greenlet python3-msgpack \
	python3-pynvim x11-common xclip \
	libasound2-dev libasound2-doc \
	librust-openssl-dev \
	libssl-dev \
	libudev-dev \
	python-is-python3 \
	python3 \
	python3-dev \
	python3-pip \
	ripgrep \
	rsync \
	unzip \
	wget \
	zsh 

    sudo apt install -y apt-transport-https
fi


# Make git consistency!
git config --global "user.email" "githubpub@todandlorna.com"
git config --global "user.name"  "Tod Hansmann"
git config --global commit.gpgsign true

# Shell stuff
sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

# Poetry
curl -sSL https://install.python-poetry.org | python3 -

# KinD
webi kind

# yq
webi yq

# kubectl
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
mv kubectl ~/.local/bin/
chmod +x ~/.local/bin/kubectl

# kubectx and kubens
webi kubectx
webi kubens

# k9s
webi k9s

# helm
VERSION=v3.9.4
BINARY=linux-amd64 
wget https://get.helm.sh/helm-${VERSION}-${BINARY}.tar.gz -O - | tar xz --strip-components 1 ${BINARY}/helm && mv helm ~/bin/helm && chmod +x ~/bin/helm

# skaffold
wget -O skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64
mv skaffold ~/bin/skaffold
chmod +x ~/bin/skaffold

echo "Installing Cloud SDKs"
GCLOUD_TAR=google-cloud-cli-469.0.0-linux-x86_64.tar.gz
curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/${GCLOUD_TAR}
tar -xf ${GCLOUD_TAR}
./google-cloud-sdk/install.sh -q --usage-reporting=true --command-completion=false 

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
rm -rf awscliv2.zip aws

# Terraform
webi terraform

echo "Installing neovim latest stable"
# sudo apt-get install -y software-properties-common
# sudo add-apt-repository ppa:neovim-ppa/stable
# sudo apt-get update
# sudo apt-get install -y neovim
curl -Lo nvim.tar.gz https://github.com/neovim/neovim/releases/download/stable/nvim-linux64.tar.gz
tar -xvzf nvim.tar.gz --strip-components=1 --directory ~/.local/
rm nvim.tar.gz
ln -s ~/.local/bin/nvim ~/.local/bin/vim 
git clone https://github.com/nvim-lua/kickstart.nvim.git "${XDG_CONFIG_HOME:-$HOME/.config}"/nvim

echo "installing Docker"
sudo apt install -y docker.io?
sudo mkdir -p /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt update
sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo groupadd docker
sudo usermod -aG docker $USER
sudo systemctl is-active docker

echo "installing thefuck"
pip3 install thefuck --usermod

yadm checkout ~/.zshrc
yadm checkout ~/.profile
echo "If you're on your T480, you may need to run the commands below this! Look at the script if you are!"
#cvt 1920 1080
# Copy the results that look like the following, everything after "Modeline "
# Modeline "1920x1080_60.00"  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync
#sudo xrandr --newmode "1920x1080_60.00"  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync
# If you are on Wayland (the -q command says your display is something like WAYLAND0) you will need to turn it off in GDM
#sudo xrandr --addmode eDP-1 1920x1080_60.00
#sudo xrandr -q


