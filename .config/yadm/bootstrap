#!/bin/bash

# Remember that you still need zsh and yadm and thus git before you do this script

# pull submodules
cd "$HOME"
echo "Init submodules"
yadm submodule update --recursive --init

echo "Update submodules"
yadm pull --recurse-submodules

# This is required on new systems because a home dir "bin" is nonstandard
mkdir -p ~/bin

# Setup some common vars for package resolution
OS="$(uname -s)"
ARCH="$(uname -m)"

case $OS in
    "Linux")
        case $ARCH in
        "x86_64")
            ARCH=amd64
            ;;
        "aarch64")
            ARCH=arm64
            ;;
        "armv6" | "armv7l")
            ARCH=armv6l
            ;;
        "armv8")
            ARCH=arm64
            ;;
        .*386.*)
            ARCH=386
            ;;
        esac
        PLATFORM="linux-$ARCH"
    ;;
    "Darwin")
          case $ARCH in
          "x86_64")
              ARCH=amd64
              ;;
          "arm64")
              ARCH=arm64
              ;;
          esac
        PLATFORM="darwin-$ARCH"
    ;;
esac

#Install Webi and Go via Webi
curl -sS https://webi.sh/ | sh
webi golang

echo "Installing vim plug"
curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
vim +PlugInstall +qall

echo "Installing utilities"
if [ -n "$(command -v apt-get)" ]
then
    sudo add-apt-repository -y ppa:neovim-ppa/stable
    sudo apt update
	sudo apt install -y \
		build-essential \
		curl \
		ca-certificates \
		curl \
		dnsutils \
		lsb-release \
		git \
		gnupg \
		gnupg2 \
		htop \
		inotify-tools \
		jq \
	        libasound2-dev libasound2-doc \
		librust-openssl-dev \
		libssl-dev \
		libudev-dev \
		python-is-python3 \
		neovim \
		rsync \
		unzip \
		wget \
		zsh 
fi

# Make git consistency!
git config --global "user.email" "githubpub@todandlorna.com"
git config --global "user.name"  "Tod Hansmann"
git config --global commit.gpgsign true

# Shell stuff
sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
zsh < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

# Poetry
curl -sSL https://install.python-poetry.org | python3 -

# KinD
curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.15.0/kind-linux-amd64
chmod +x ./kind
sudo mv ./kind ~/bin/kind

# yq
VERSION=v4.27.3
BINARY=linux_amd64
wget https://github.com/mikefarah/yq/releases/download/${VERSION}/yq_${BINARY} -O ~/bin/yq && \ 
    chmod +x ~/bin/yq

# kubectl
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
mv kubectl ~/bin/
chmod +x ~/bin/kubectl

# kubectx and kubens
VERSION=v0.9.4
BINARY=linux_x86_64
wget https://github.com/ahmetb/kubectx/releases/download/${VERSION}/kubectx_${VERSION}_${BINARY}.tar.gz -O - | tar xz kubectx && mv kubectx ~/bin/kubectx && chmod +x ~/bin/kubectx
wget https://github.com/ahmetb/kubectx/releases/download/${VERSION}/kubens_${VERSION}_${BINARY}.tar.gz -O - | tar xz kubens && mv kubens ~/bin/kubens && chmod +x ~/bin/kubens

# k9s
VERSION=v0.26.3
BINARY=Linux_x86_64
wget https://github.com/derailed/k9s/releases/download/${VERSION}/k9s_${BINARY}.tar.gz -O - | tar xz k9s && mv k9s ~/bin/k9s && chmod +x ~/bin/k9s

# helm
VERSION=v3.9.4
BINARY=linux-amd64 
wget https://get.helm.sh/helm-${VERSION}-${BINARY}.tar.gz -O - | tar xz --strip-components 1 ${BINARY}/helm && mv helm ~/bin/helm && chmod +x ~/bin/helm


echo "Installing Cloud SDKs"
#sudo echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
#sudo curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
sudo echo "deb [signed-by=/etc/apt/trusted.gpg.d/package.cloud.google.com.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
sudo curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo tee /etc/apt/trusted.gpg.d/package.cloud.google.com.gpg
sudo apt-get update && sudo apt-get install google-cloud-sdk -y

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
rm -rf awscliv2.zip aws

#curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo tee /etc/apt/trusted.gpg.d/apt.releases.hashicorp.com.gpg
sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
sudo apt-get update && sudo apt-get install -y terraform

echo "Installing neovim and it's PPA because Ubuntu is way behind"
sudo apt-get install -y software-properties-common
sudo add-apt-repository ppa:neovim-ppa/stable
sudo apt-get update
sudo apt-get install -y neovim

echo "installing Docker?"
sudo apt install -y docker.io
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt update
sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
sudo groupadd docker
sudo usermod -aG docker $USER

yadm checkout ~/.zshrc
yadm checkout ~/.profile
echo "If you're on your T480, you may need to run the commands below this! Look at the script if you are!"
#cvt 1920 1080
# Copy the results that look like the following, everything after "Modeline "
# Modeline "1920x1080_60.00"  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync
#sudo xrandr --newmode "1920x1080_60.00"  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync
# If you are on Wayland (the -q command says your display is something like WAYLAND0) you will need to turn it off in GDM
#sudo xrandr --addmode eDP-1 1920x1080_60.00
#sudo xrandr -q


